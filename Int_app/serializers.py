from rest_framework import serializers
from .models import User
from django.contrib.auth.hashers import make_password
from mongoengine import ValidationError as MongoValidationError



class PredictionSerializer_LungCancer(serializers.Serializer):
    EMAIL = serializers.EmailField(required=True)
    GENDER= serializers.CharField()
    AGE = serializers.IntegerField()
    SMOKING = serializers.CharField()
    YELLOW_FINGERS = serializers.CharField()
    ANXIETY = serializers.CharField()
    PEER_PRESSURE = serializers.CharField()
    CHRONIC_DISEASE = serializers.CharField()
    FATIGUE = serializers.CharField()
    ALLERGY = serializers.CharField()
    WHEEZING = serializers.CharField()
    ALCOHOL_CONSUMING = serializers.CharField()
    COUGHING = serializers.CharField()
    SHORTNESS_OF_BREATH = serializers.CharField()
    SWALLOWING_DIFFICULTY = serializers.CharField()
    CHEST_PAIN = serializers.CharField()
class PredictionSerializer_BreastCancer(serializers.Serializer):
    EMAIL = serializers.EmailField(required=True)
    AGE = serializers.IntegerField()
    T_STAGE = serializers.IntegerField()
    N_STAGE = serializers.IntegerField()
    FINAL_STAGE = serializers.IntegerField()
    GRADE = serializers.IntegerField()
    REGIONAL_NODE_EXAMINED = serializers.IntegerField()
    REGIONAL_NODE_POSITIVE = serializers.IntegerField()
    SURVIVAL_MONTHS = serializers.IntegerField()
    RACE = serializers.ChoiceField(choices=['White','Black','Other'])
    MARITAL_STAT = serializers.ChoiceField(choices=['Married','Divorced','Single','Separated','Widowed'])
    DIFFERENTIATED = serializers.ChoiceField(choices=['Poorlydifferentiated','Moderatelydifferentiated','Undifferentiated','Welldifferentiated'])
    A_STAGE = serializers.ChoiceField(choices=['Regional','Distant'])
    ALIVE_STAT = serializers.ChoiceField(choices=['Alive','Dead'])
    ESTROGEN = serializers.ChoiceField(choices=['Positive','Negative'])
    PROGESTERONE = serializers.ChoiceField(choices=['Positive','Negative'])
class PredictionSerializer_Depression(serializers.Serializer):
    EMAIL = serializers.EmailField(required=True)
    SLEEP = serializers.IntegerField()
    APPETITE = serializers.IntegerField()
    INTEREST = serializers.IntegerField()
    FATIGUE = serializers.IntegerField()
    WORTHLESSNESS = serializers.IntegerField()
    CONCENTRATION = serializers.IntegerField()
    AGITATION = serializers.IntegerField()
    SUICIDAL_THOUGHTS = serializers.IntegerField()
    SLEEP_DISORDERS = serializers.IntegerField()
    AGGRESSION = serializers.IntegerField()
    PANIC_ATTACKS = serializers.IntegerField()
    HOPELESSNESS = serializers.IntegerField()
    RESTLESSNESS = serializers.IntegerField()
    LOW_ENERGY = serializers.IntegerField()
class PredictionSerializer_Diabetes(serializers.Serializer):
    EMAIL = serializers.EmailField(required=True)
    PREGNANCY = serializers.IntegerField()
    GLUCOSE = serializers.IntegerField()
    BLOOD_PRESSURE = serializers.IntegerField()
    SKIN_THICKNESS = serializers.IntegerField()
    INSULIN = serializers.IntegerField()
    BMI = serializers.DecimalField(max_digits=10, decimal_places=4)
    DIABETES_FUNCTION = serializers.DecimalField(max_digits=10, decimal_places=4)
    AGE = serializers.IntegerField()
class PredictionSerializer_HeartDisease(serializers.Serializer):
    EMAIL = serializers.EmailField(required=True)
    AGE = serializers.IntegerField()
    SEX = serializers.ChoiceField(choices=['Female','Male'])
    CHEST_PAIN = serializers.ChoiceField(choices=['Asymptomatic','Atypical angina','Non-anginal pain','Typical angina'])
    RESTING_BP = serializers.IntegerField()
    CHOLESTORAL = serializers.IntegerField()
    FASTING_BP = serializers.ChoiceField(choices=['Greater than 120 mg/ml','Lower than 120 mg/ml'])
    REST_ECG = serializers.ChoiceField(choices=['Left ventricular hypertrophy','Normal','ST-T wave abnormality'])
    MAX_HEARTRATE = serializers.IntegerField()
    EXCERCISE = serializers.ChoiceField(choices=['No','Yes'])
    OLD_PEAK = serializers.DecimalField(max_digits=10, decimal_places=4)
    SLOPING = serializers.ChoiceField(choices=['Downsloping','Flat','Upsloping'])
    VESSELS = serializers.ChoiceField(choices=['Four','One','Three','Two','Zero'])
    THALASSEMIA = serializers.ChoiceField(choices=['Fixed Defect','No','Normal','Reversable Defect'])
class PredictionSerializer_SkinDisease(serializers.Serializer):
    EMAIL = serializers.EmailField(required=True)
    ERYTHEMA = serializers.IntegerField()
    SCALING = serializers.IntegerField()
    DEFINITE_BORDERS = serializers.IntegerField()
    ITCHING = serializers.IntegerField()
    KOEBNER_PHENOMENON = serializers.IntegerField()
    POLYGONAL_PAPULES = serializers.IntegerField()
    FOLLICULAR_PAPULES = serializers.IntegerField()
    ORAL_MUCOSAL_INVOLVEMENT = serializers.IntegerField()
    KNEE_AND_ELBOW_INVOLVEMENT = serializers.IntegerField()
    SCALP_INVOLVEMENT = serializers.IntegerField()
    FAMILY_HISTORY = serializers.IntegerField()
    MELANIN_INCONTINENCE = serializers.IntegerField()
    EOSINOPHILS_INFILTRATE = serializers.IntegerField()
    PNL_INFILTRATE = serializers.IntegerField()
    FIBROSIS_PAPILLARY_DERMIS = serializers.IntegerField()
    EXOCYTOSIS = serializers.IntegerField()
    ACANTHOSIS = serializers.IntegerField()
    HYPERKERATOSIS = serializers.IntegerField()
    PARAKERATOSIS = serializers.IntegerField()
    CLUBBING_RETE_RIDGES = serializers.IntegerField()
    ELONGATION_RETE_RIDGES = serializers.IntegerField()
    THINNING_SUPRAPAPILLARY_EPDERMIS = serializers.IntegerField()
    SPONGIFORM_PUSTULE = serializers.IntegerField()
    MUNRO_MICROABCESS = serializers.IntegerField()
    FOCAL_HYPERGRANULOSIS = serializers.IntegerField()
    DISAPPEARANCE_GRANULAR_LAYER = serializers.IntegerField()
    VACUOLISATION_DAMAGE_BASAL_LAYER = serializers.IntegerField()
    SPONGIOSIS = serializers.IntegerField()
    SAW_TOOTH_APPEARANCE_RETSES = serializers.IntegerField()
    FOLLICULAR_HORN_PLUG = serializers.IntegerField()
    PERIFOLLICULAR_PARAKERATOSIS = serializers.IntegerField()
    INFLAMMATORY_MONONUCLEAR_INFILTRATE = serializers.IntegerField()
    BAND_LIKE_INFILTRATE = serializers.IntegerField()
    AGE = serializers.IntegerField()
class PredictionSerializer_Stroke(serializers.Serializer):
    EMAIL = serializers.EmailField(required=True)
    GENDER = serializers.ChoiceField(choices=['Male', 'Female', 'Other'])
    EMPLOYED = serializers.ChoiceField(choices=['Govt_job', 'Private', 'Self-employed', 'Never_worked', 'children'])
    SMOKING_STAT = serializers.ChoiceField(choices=['Unkn0wn', 'formerlysmoked', 'neversmoked', 'smokes'])
    HYPERTENSION = serializers.ChoiceField(choices=['No', 'Yes'])
    HEART_DISEASE = serializers.ChoiceField(choices=['No', 'Yes'])
    MARITAL_STATUS = serializers.ChoiceField(choices=['No', 'Yes'])
    RESIDENCE = serializers.ChoiceField(choices=['Urban', 'Rural'])
    AGE = serializers.FloatField()
    AVG_GLUCOSE = serializers.FloatField()
    BMI = serializers.FloatField()
class PredictionSerializer_KidneyDisease(serializers.Serializer):
    EMAIL = serializers.EmailField(required=True)
    AGE = serializers.IntegerField()
    BP = serializers.IntegerField()
    SG = serializers.DecimalField(max_digits=10, decimal_places=4)
    AL = serializers.IntegerField()
    SU = serializers.IntegerField()
    RBC = serializers.ChoiceField(choices=['abnormal','normal'])
    PC = serializers.ChoiceField(choices=['abnormal','normal'])
    PCC = serializers.ChoiceField(choices=['present','notpresent'])
    BA = serializers.ChoiceField(choices=['present','notpresent'])
    BGR = serializers.IntegerField()
    BU = serializers.IntegerField()
    SC = serializers.IntegerField()
    SOD = serializers.IntegerField()
    POT = serializers.DecimalField(max_digits=10, decimal_places=4)
    HEMO = serializers.IntegerField()
    HTN = serializers.ChoiceField(choices=['no','yes'])
    DM = serializers.ChoiceField(choices=['no','yes'])
    CAD = serializers.ChoiceField(choices=['no','yes'])
    APPET = serializers.ChoiceField(choices=['good','poor'])
    PE = serializers.ChoiceField(choices=['no','yes'])
    ANE = serializers.ChoiceField(choices=['no','yes'])
class PredictionSerializer_ParkinssonDisease(serializers.Serializer):
    EMAIL = serializers.EmailField(required=True)
    MDVP_FO_HZ = serializers.FloatField()
    MDVP_FHI_HZ = serializers.FloatField()
    MDVP_FLO_HZ = serializers.FloatField()
    MDVP_JITTER_PERCENT = serializers.FloatField()
    MDVP_JITTER_ABS = serializers.FloatField()
    MDVP_RAP = serializers.FloatField()
    MDVP_PPQ = serializers.FloatField()
    JITTER_DDP = serializers.FloatField()
    MDVP_SHIMMER = serializers.FloatField()
    MDVP_SHIMMER_DB = serializers.FloatField()
    SHIMMER_APQ3 = serializers.FloatField()
    SHIMMER_APQ5 = serializers.FloatField()
    MDVP_APQ = serializers.FloatField()
    SHIMMER_DDA = serializers.FloatField()
    NHR = serializers.FloatField()
    HNR = serializers.FloatField()
    PPE = serializers.FloatField()
    RPDE = serializers.FloatField()
    DFA = serializers.FloatField()
    SPREAD1 = serializers.FloatField()
    SPREAD2 = serializers.FloatField()
    D2 = serializers.FloatField()
class UserSignupSerializer(serializers.Serializer):
    username = serializers.CharField(max_length=255)
    email = serializers.EmailField()
    password = serializers.CharField(write_only=True)

    def create(self, validated_data):
        user = User(
            username=validated_data['username'],
            email=validated_data['email']
        )
        user.set_password(validated_data['password'])
        user.save()
        return user
class UserLoginSerializer(serializers.Serializer):
    email = serializers.EmailField()
    password = serializers.CharField(write_only=True)







